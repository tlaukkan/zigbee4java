package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.ArmCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.ArmResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.BypassCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.EmergencyCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.FireCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneIdMapCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneIdMapResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneInformationCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.GetZoneInformationResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.iasace.PanicCommand;

/**
 * <b>IAS ACE</b> cluster implementation (<i>Cluster ID 0x0501</i>).
 * <p>
 * The IAS ACE cluster defines an interface to the functionality of any Ancillary
 * Control Equipment of the IAS system. Using this cluster, a ZigBee enabled ACE
 * device can access a IAS CIE device and manipulate the IAS system, on behalf of a
 * level-2 user.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclIasAceCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0501;

    /**
     * Default constructor.
     */
    public ZclIasAceCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * The Arm Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> armCommand() {
        return send(new ArmCommand());
    }


    /**
     * The Bypass Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bypassCommand() {
        return send(new BypassCommand());
    }


    /**
     * The Emergency Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> emergencyCommand() {
        return send(new EmergencyCommand());
    }


    /**
     * The Fire Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> fireCommand() {
        return send(new FireCommand());
    }


    /**
     * The Panic Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> panicCommand() {
        return send(new PanicCommand());
    }


    /**
     * The Get Zone ID Map Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneIdMapCommand() {
        return send(new GetZoneIdMapCommand());
    }


    /**
     * The Get Zone Information Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneInformationCommand() {
        return send(new GetZoneInformationCommand());
    }


    /**
     * The  Arm Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> armResponse() {
        return send(new ArmResponse());
    }


    /**
     * The  Get Zone ID Map Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneIdMapResponse() {
        return send(new GetZoneIdMapResponse());
    }


    /**
     * The  Get Zone Information Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getZoneInformationResponse() {
        return send(new GetZoneInformationResponse());
    }

}
