package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;

/**
 * <b>Pressure measurement</b> cluster implementation (<i>Cluster ID 0x0403</i>).
 * <p>
 * The cluster provides an interface to pressure measurement functionality,
 * including configuration and provision of notifications of pressure measurements.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclPressureMeasurementCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0403;

    // Attribute constants
    private final int ATTR_MEASUREDVALUE = 0x0000;
    private final int ATTR_MINMEASUREDVALUE = 0x0001;
    private final int ATTR_MAXMEASUREDVALUE = 0x0002;
    private final int ATTR_TOLERANCE = 0x0003;
    private final int ATTR_SCALEDVALUE = 0x0010;
    private final int ATTR_MINSCALEDVALUE = 0x0011;
    private final int ATTR_MAXSCALEDVALUE = 0x0012;
    private final int ATTR_SCALEDTOLERANCE = 0x0013;
    private final int ATTR_SCALE = 0x0014;

    /**
     * Default constructor.
     */
    public ZclPressureMeasurementCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Get the <i>MeasuredValue</i> attribute
     * <p>
     * MeasuredValue represents the pressure in kPa as follows:-
     * <br>
     * MeasuredValue = 10 x Pressure
     * <br>
     * Where -3276.7 kPa <= Pressure <= 3276.7 kPa, corresponding to a
     * MeasuredValue in the range 0x8001 to 0x7fff.
     * <br>
     * Note:- The maximum resolution this format allows is 0.1 kPa.
     * <br>
     * A MeasuredValue of 0x8000 indicates that the pressure measurement is invalid.
     * MeasuredValue is updated continuously as new measurements are made.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMeasuredValue() {
        return read(ATTR_MEASUREDVALUE);
    }


    /**
     * Configure reporting for the <i>MeasuredValue</i> attribute
     * <p>
     * MeasuredValue represents the pressure in kPa as follows:-
     * <br>
     * MeasuredValue = 10 x Pressure
     * <br>
     * Where -3276.7 kPa <= Pressure <= 3276.7 kPa, corresponding to a
     * MeasuredValue in the range 0x8001 to 0x7fff.
     * <br>
     * Note:- The maximum resolution this format allows is 0.1 kPa.
     * <br>
     * A MeasuredValue of 0x8000 indicates that the pressure measurement is invalid.
     * MeasuredValue is updated continuously as new measurements are made.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} minimum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configMeasuredValueReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_MEASUREDVALUE, minInterval, maxInterval, reportableChange);
    }


    /**
     * Get the <i>MinMeasuredValue</i> attribute
     * <p>
     * <br>
     * The MinMeasuredValue attribute indicates the minimum value of MeasuredValue
     * that can be measured. A value of 0x8000 means this attribute is not defined.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMinMeasuredValue() {
        return read(ATTR_MINMEASUREDVALUE);
    }


    /**
     * Get the <i>MaxMeasuredValue</i> attribute
     * <p>
     * <br>
     * The MaxMeasuredValue attribute indicates the maximum value of MeasuredValue
     * that can be measured. A value of 0x8000 means this attribute is not defined.
     * <br>
     * MaxMeasuredValue shall be greater than MinMeasuredValue.
     * <br>
     * MinMeasuredValue and MaxMeasuredValue define the range of the sensor.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMaxMeasuredValue() {
        return read(ATTR_MAXMEASUREDVALUE);
    }


    /**
     * Configure reporting for the <i>MaxMeasuredValue</i> attribute
     * <p>
     * <br>
     * The MaxMeasuredValue attribute indicates the maximum value of MeasuredValue
     * that can be measured. A value of 0x8000 means this attribute is not defined.
     * <br>
     * MaxMeasuredValue shall be greater than MinMeasuredValue.
     * <br>
     * MinMeasuredValue and MaxMeasuredValue define the range of the sensor.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} minimum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configMaxMeasuredValueReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_MAXMEASUREDVALUE, minInterval, maxInterval, reportableChange);
    }


    /**
     * Get the <i>Tolerance</i> attribute
     * <p>
     * <br>
     * The Tolerance attribute indicates the magnitude of the possible error that is
     * associated with MeasuredValue . The true value is located in the range
     * (MeasuredValue â€“ Tolerance) to (MeasuredValue + Tolerance).
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getTolerance() {
        return read(ATTR_TOLERANCE);
    }


    /**
     * Get the <i>ScaledValue</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getScaledValue() {
        return read(ATTR_SCALEDVALUE);
    }


    /**
     * Configure reporting for the <i>ScaledValue</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} minimum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configScaledValueReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_SCALEDVALUE, minInterval, maxInterval, reportableChange);
    }


    /**
     * Get the <i>MinScaledValue</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMinScaledValue() {
        return read(ATTR_MINSCALEDVALUE);
    }


    /**
     * Get the <i>MaxScaledValue</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMaxScaledValue() {
        return read(ATTR_MAXSCALEDVALUE);
    }


    /**
     * Get the <i>ScaledTolerance</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getScaledTolerance() {
        return read(ATTR_SCALEDTOLERANCE);
    }


    /**
     * Configure reporting for the <i>ScaledTolerance</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} minimum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configScaledToleranceReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_SCALEDTOLERANCE, minInterval, maxInterval, reportableChange);
    }


    /**
     * Get the <i>Scale</i> attribute
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getScale() {
        return read(ATTR_SCALE);
    }


    /**
     * Add a binding for this cluster to the local node
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bind() {
        return bind();
    }

}
