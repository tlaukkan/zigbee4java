package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.identify.IdentifyCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.identify.IdentifyQueryCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.identify.IdentifyQueryResponse;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>Identify</b> cluster implementation (<i>Cluster ID 0x0003</i>).
 * <p>
 * Attributes and commands to put a device into an Identification mode (e.g. flashing
 * a light), that indicates to an observer â€“ e.g. an installer - which of several devices
 * it is, also to request any device that is identifying itself to respond to the initiator.
 * <br>
 * Note that this cluster cannot be disabled, and remains functional regardless of the
 * setting of the DeviceEnable attribute in the Basic cluster.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclIdentifyCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0003;

    // Attribute constants
    private final int ATTR_IDENTIFYTIME = 0x0000;

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(1);

        attributeMap.put(ATTR_IDENTIFYTIME, new ZclAttribute(0, ZclDataType.UNSIGNED_16_BIT_INTEGER, 
                true, true, true, false));

        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclIdentifyCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Set the <i>IdentifyTime</i> attribute
     * <p>
     * The IdentifyTime attribute specifies the remaining length of time, in seconds, that
     * the device will continue to identify itself.
     * <br>
     * If this attribute is set to a value other than 0x0000 then the device shall enter its
     * identification procedure, in order to indicate to an observer which of several
     * devices it is. It is recommended that this procedure consists of flashing a light
     * with a period of 0.5 seconds. The IdentifyTime attribute shall be decremented
     * every second.
     * <br>
     * If this attribute reaches or is set to the value 0x0000 then the device shall
     * terminate its identification procedure.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @param identifyTime the {@link Integer} attribute value to be set
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> setIdentifyTime(final Object value) {
        return write(ATTR_IDENTIFYTIME, ZclDataType.UNSIGNED_16_BIT_INTEGER, value);
    }


    /**
     * Get the <i>IdentifyTime</i> attribute
     * <p>
     * The IdentifyTime attribute specifies the remaining length of time, in seconds, that
     * the device will continue to identify itself.
     * <br>
     * If this attribute is set to a value other than 0x0000 then the device shall enter its
     * identification procedure, in order to indicate to an observer which of several
     * devices it is. It is recommended that this procedure consists of flashing a light
     * with a period of 0.5 seconds. The IdentifyTime attribute shall be decremented
     * every second.
     * <br>
     * If this attribute reaches or is set to the value 0x0000 then the device shall
     * terminate its identification procedure.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getIdentifyTime() {
        return read(ATTR_IDENTIFYTIME);
    }


    /**
     * The Identify Command
     * <p>
     * The identify command starts or stops the receiving device identifying itself.
     * </p>
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> identifyCommand() {
        return send(new IdentifyCommand());
    }


    /**
     * The Identify Query Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> identifyQueryCommand() {
        return send(new IdentifyQueryCommand());
    }


    /**
     * The  Identify Query Response
     * <p>
     * The identify query response command is generated in response to receiving an
     * Identify Query command in the case that the device is currently identifying itself.
     * </p>
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> identifyQueryResponse() {
        return send(new IdentifyQueryResponse());
    }


    /**
     * Add a binding for this cluster to the local node
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bind() {
        return bind();
    }

}
