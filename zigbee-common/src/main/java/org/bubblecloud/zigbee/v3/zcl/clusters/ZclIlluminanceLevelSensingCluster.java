package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>Illuminance level sensing</b> cluster implementation (<i>Cluster ID 0x0401</i>).
 * <p>
 * The cluster provides an interface to illuminance level sensing functionality,
 * including configuration and provision of notifications of whether the illuminance
 * is within, above or below a target band.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclIlluminanceLevelSensingCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0401;

    // Attribute constants
    private final int ATTR_LEVELSTATUS = 0x0000;
    private final int ATTR_LIGHTSENSORTYPE = 0x0001;

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(2);

        attributeMap.put(ATTR_LEVELSTATUS, new ZclAttribute(0, ZclDataType.ENUMERATION_8_BIT, 
                true, true, false, true));
        attributeMap.put(ATTR_LIGHTSENSORTYPE, new ZclAttribute(1, ZclDataType.ENUMERATION_8_BIT, 
                false, true, false, false));

        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclIlluminanceLevelSensingCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Get the <i>LevelStatus</i> attribute
     * <p>
     * The LevelStatus attribute indicates whether the measured illuminance is above,
     * below, or within a band around IlluminanceTargetLevel .
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getLevelStatus() {
        return read(ATTR_LEVELSTATUS);
    }


    /**
     * Configure reporting for the <i>LevelStatus</i> attribute
     * <p>
     * The LevelStatus attribute indicates whether the measured illuminance is above,
     * below, or within a band around IlluminanceTargetLevel .
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} maximum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configLevelStatusReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_LEVELSTATUS, minInterval, maxInterval, reportableChange);
    }


    /**
     * Get the <i>LightSensorType</i> attribute
     * <p>
     * <br>
     * The LightSensorType attribute specifies the electronic type of the light sensor.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getLightSensorType() {
        return read(ATTR_LIGHTSENSORTYPE);
    }


    /**
     * Add a binding for this cluster to the local node
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bind() {
        return bind();
    }

}
