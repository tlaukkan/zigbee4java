package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.AddGroupCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.AddGroupIfIdentifyingCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.AddGroupResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.GetGroupMembershipCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.GetGroupMembershipResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.RemoveAllGroupsCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.RemoveGroupCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.RemoveGroupResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.ViewGroupCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.groups.ViewGroupResponse;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>Groups</b> cluster implementation (<i>Cluster ID 0x0004</i>).
 * <p>
 * The ZigBee specification provides the capability for group addressing. That is,
 * any endpoint on any device may be assigned to one or more groups, each labeled
 * with a 16-bit identifier (0x0001 â€“ 0xfff7), which acts for all intents and purposes
 * like a network address. Once a group is established, frames, sent using the
 * APSDE-DATA.request primitive and having a DstAddrMode of 0x01, denoting
 * group addressing, will be delivered to every endpoint assigned to the group
 * address named in the DstAddr parameter of the outgoing APSDE-DATA.request
 * primitive on every device in the network for which there are such endpoints.
 * <br>
 * Management of group membership on each device and endpoint is implemented
 * by the APS, but the over-the-air messages that allow for remote management and
 * commissioning of groups are defined here in the cluster library on the theory that,
 * while the basic group addressing facilities are integral to the operation of the
 * stack, not every device will need or want to implement this management cluster.
 * Furthermore, the placement of the management commands here allows developers
 * of proprietary profiles to avoid implementing the library cluster but still exploit
 * group addressing
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclGroupsCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0004;

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(0);


        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclGroupsCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * The Add Group Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> addGroupCommand() {
        return send(new AddGroupCommand());
    }


    /**
     * The View Group Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> viewGroupCommand() {
        return send(new ViewGroupCommand());
    }


    /**
     * The Get Group Membership Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getGroupMembershipCommand() {
        return send(new GetGroupMembershipCommand());
    }


    /**
     * The Remove Group Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> removeGroupCommand() {
        return send(new RemoveGroupCommand());
    }


    /**
     * The Remove All Groups Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> removeAllGroupsCommand() {
        return send(new RemoveAllGroupsCommand());
    }


    /**
     * The Add Group If Identifying Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> addGroupIfIdentifyingCommand() {
        return send(new AddGroupIfIdentifyingCommand());
    }


    /**
     * The  Add Group Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> addGroupResponse() {
        return send(new AddGroupResponse());
    }


    /**
     * The  View Group Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> viewGroupResponse() {
        return send(new ViewGroupResponse());
    }


    /**
     * The  Get Group Membership Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getGroupMembershipResponse() {
        return send(new GetGroupMembershipResponse());
    }


    /**
     * The  Remove Group Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> removeGroupResponse() {
        return send(new RemoveGroupResponse());
    }

}
