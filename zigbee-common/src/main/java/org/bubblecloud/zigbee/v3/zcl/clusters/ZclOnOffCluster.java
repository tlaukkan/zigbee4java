package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.onoff.OffCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.onoff.OnCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.onoff.ToggleCommand;

/**
 * <b>On/Off</b> cluster implementation (<i>Cluster ID 0x0006</i>).
 * <p>
 * Attributes and commands for switching devices between ‘On’ and ‘Off’ states.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclOnOffCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0006;

    // Attribute constants
    private final int ATTR_ONOFF = 0x0000;

    /**
     * Default constructor.
     */
    public ZclOnOffCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Get the <i>OnOff</i> attribute
     * <p>
     * The OnOff attribute has the following values: 0 = Off, 1 = On
     * </p>
     * The attribute is of type {@link Boolean}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getOnOff() {
        return read(ATTR_ONOFF);
    }


    /**
     * The Off Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> offCommand() {
        return send(new OffCommand());
    }


    /**
     * The On Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> onCommand() {
        return send(new OnCommand());
    }


    /**
     * The Toggle Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> toggleCommand() {
        return send(new ToggleCommand());
    }

}
