package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.MoveCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.MoveToLevelCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.MoveToLevelWithOnOffCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.MoveWithOnOffCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.StepCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.StepWithOnOffCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.Stop2Command;
import org.bubblecloud.zigbee.v3.zcl.clusters.levelcontrol.StopCommand;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>Level Control</b> cluster implementation (<i>Cluster ID 0x0008</i>).
 * <p>
 * This cluster provides an interface for controlling a characteristic of a device that
 * can be set to a level, for example the brightness of a light, the degree of closure of
 * a door, or the power output of a heater.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclLevelControlCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0008;

    // Attribute constants
    private final int ATTR_ONLEVEL = 0x0000;

    /**
     * Default constructor.
     */
    public ZclLevelControlCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Set the <i>OnLevel</i> attribute
     * <p>
     * The OnLevel attribute determines the value that the CurrentLevel attribute is set to
     * when the OnOff attribute of an On/Off cluster on the same endpoint is set to On. If
     * the OnLevel attribute is not implemented, or is set to 0xff, it has no effect.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @param onLevel the {@link Integer} attribute value to be set
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> setOnLevel(final Object value) {
        return write(ATTR_ONLEVEL, ZclDataType.UNSIGNED_8_BIT_INTEGER, value);
    }


    /**
     * Get the <i>OnLevel</i> attribute
     * <p>
     * The OnLevel attribute determines the value that the CurrentLevel attribute is set to
     * when the OnOff attribute of an On/Off cluster on the same endpoint is set to On. If
     * the OnLevel attribute is not implemented, or is set to 0xff, it has no effect.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getOnLevel() {
        return read(ATTR_ONLEVEL);
    }


    /**
     * The Move to Level Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> moveToLevelCommand() {
        return send(new MoveToLevelCommand());
    }


    /**
     * The Move Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> moveCommand() {
        return send(new MoveCommand());
    }


    /**
     * The Step Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> stepCommand() {
        return send(new StepCommand());
    }


    /**
     * The Stop Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> stopCommand() {
        return send(new StopCommand());
    }


    /**
     * The Move to Level (with On/Off) Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> moveToLevelWithOnOffCommand() {
        return send(new MoveToLevelWithOnOffCommand());
    }


    /**
     * The Move (with On/Off) Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> moveWithOnOffCommand() {
        return send(new MoveWithOnOffCommand());
    }


    /**
     * The Step (with On/Off) Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> stepWithOnOffCommand() {
        return send(new StepWithOnOffCommand());
    }


    /**
     * The Stop 2 Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> stop2Command() {
        return send(new Stop2Command());
    }


    /**
     * Add a binding for this cluster to the local node
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bind() {
        return bind();
    }

}
