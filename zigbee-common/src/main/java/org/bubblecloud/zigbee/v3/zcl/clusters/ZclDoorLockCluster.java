package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.doorlock.LockDoorCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.doorlock.LockDoorResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.doorlock.UnlockDoorCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.doorlock.UnlockDoorResponse;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>Door Lock</b> cluster implementation (<i>Cluster ID 0x0101</i>).
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclDoorLockCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0101;

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(0);


        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclDoorLockCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * The Lock Door Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> lockDoorCommand() {
        return send(new LockDoorCommand());
    }


    /**
     * The Unlock Door Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> unlockDoorCommand() {
        return send(new UnlockDoorCommand());
    }


    /**
     * The  Lock Door Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> lockDoorResponse() {
        return send(new LockDoorResponse());
    }


    /**
     * The  Unlock Door Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> unlockDoorResponse() {
        return send(new UnlockDoorResponse());
    }

}
