package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;

/**
 * <b>Temperature measurement</b> cluster implementation (<i>Cluster ID 0x0402</i>).
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclTemperatureMeasurementCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0402;

    // Attribute constants
    private final int ATTR_MEASUREDVALUE = 0x0000;
    private final int ATTR_MINMEASUREDVALUE = 0x0001;
    private final int ATTR_MAXMEASUREDVALUE = 0x0002;
    private final int ATTR_TOLERANCE = 0x0003;

    /**
     * Default constructor.
     */
    public ZclTemperatureMeasurementCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Get the <i>MeasuredValue</i> attribute
     * <p>
     * MeasuredValue represents the temperature in degrees Celsius as follows:-
     * MeasuredValue = 100 x temperature in degrees Celsius.
     * <br>
     * Where -273.15°C <= temperature <= 327.67 ºC, corresponding to a
     * <br>
     * MeasuredValue in the range 0x954d to 0x7fff. The maximum resolution this
     * format allows is 0.01 ºC.
     * <br>
     * A MeasuredValue of 0x8000 indicates that the temperature measurement is
     * invalid.
     * <br>
     * MeasuredValue is updated continuously as new measurements are made.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMeasuredValue() {
        return read(ATTR_MEASUREDVALUE);
    }


    /**
     * Configure reporting for the <i>MeasuredValue</i> attribute
     * <p>
     * MeasuredValue represents the temperature in degrees Celsius as follows:-
     * MeasuredValue = 100 x temperature in degrees Celsius.
     * <br>
     * Where -273.15°C <= temperature <= 327.67 ºC, corresponding to a
     * <br>
     * MeasuredValue in the range 0x954d to 0x7fff. The maximum resolution this
     * format allows is 0.01 ºC.
     * <br>
     * A MeasuredValue of 0x8000 indicates that the temperature measurement is
     * invalid.
     * <br>
     * MeasuredValue is updated continuously as new measurements are made.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} minimum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configMeasuredValueReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_MEASUREDVALUE, minInterval, maxInterval, reportableChange);
    }


    /**
     * Get the <i>MinMeasuredValue</i> attribute
     * <p>
     * <br>
     * The MinMeasuredValue attribute indicates the minimum value of MeasuredValue
     * that is capable of being measured. A MinMeasuredValue of 0x8000 indicates that
     * the minimum value is unknown.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMinMeasuredValue() {
        return read(ATTR_MINMEASUREDVALUE);
    }


    /**
     * Get the <i>MaxMeasuredValue</i> attribute
     * <p>
     * <br>
     * The MaxMeasuredValue attribute indicates the maximum value of MeasuredValue
     * that is capable of being measured.
     * <br>
     * MaxMeasuredValue shall be greater than MinMeasuredValue.
     * <br>
     * MinMeasuredValue and MaxMeasuredValue define the range of the sensor.
     * <br>
     * A MaxMeasuredValue of 0x8000 indicates that the maximum value is unknown.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is MANDATORY
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getMaxMeasuredValue() {
        return read(ATTR_MAXMEASUREDVALUE);
    }


    /**
     * Get the <i>Tolerance</i> attribute
     * <p>
     * <br>
     * The Tolerance attribute indicates the magnitude of the possible error that is
     * associated with MeasuredValue . The true value is located in the range
     * (MeasuredValue – Tolerance) to (MeasuredValue + Tolerance).
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getTolerance() {
        return read(ATTR_TOLERANCE);
    }


    /**
     * Configure reporting for the <i>Tolerance</i> attribute
     * <p>
     * <br>
     * The Tolerance attribute indicates the magnitude of the possible error that is
     * associated with MeasuredValue . The true value is located in the range
     * (MeasuredValue – Tolerance) to (MeasuredValue + Tolerance).
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @param minInterval {@link int} minimum reporting period
     * @param maxInterval {@link int} minimum reporting period
     * @param reportableChange {@link Object} delta required to trigger report
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> configToleranceReporting(final int minInterval, final int maxInterval, final Object reportableChange) {
        return report(ATTR_TOLERANCE, minInterval, maxInterval, reportableChange);
    }


    /**
     * Add a binding for this cluster to the local node
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bind() {
        return bind();
    }

}
