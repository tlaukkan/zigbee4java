package org.bubblecloud.zigbee.v3.zcl.clusters;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Future;
import org.bubblecloud.zigbee.v3.CommandResult;
import org.bubblecloud.zigbee.v3.ZigBeeApi;
import org.bubblecloud.zigbee.v3.ZigBeeDevice;
import org.bubblecloud.zigbee.v3.zcl.ZclAttribute;
import org.bubblecloud.zigbee.v3.zcl.ZclCluster;
import org.bubblecloud.zigbee.v3.zcl.clusters.alarms.AlarmCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.alarms.GetAlarmCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.alarms.GetAlarmResponse;
import org.bubblecloud.zigbee.v3.zcl.clusters.alarms.ResetAlarmCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.alarms.ResetAlarmLogCommand;
import org.bubblecloud.zigbee.v3.zcl.clusters.alarms.ResetAllAlarmsCommand;
import org.bubblecloud.zigbee.v3.zcl.protocol.ZclDataType;

/**
 * <b>Alarms</b> cluster implementation (<i>Cluster ID 0x0009</i>).
 * <p>
 * Attributes and commands for sending alarm notifications and configuring alarm
 * functionality.
 * <br>
 * Alarm conditions and their respective alarm codes are described in individual
 * clusters, along with an alarm mask field. Where not masked, alarm notifications
 * are reported to subscribed targets using binding.
 * <br>
 * Where an alarm table is implemented, all alarms, masked or otherwise, are
 * recorded and may be retrieved on demand.
 * <br>
 * Alarms may either reset automatically when the conditions that cause are no
 * longer active, or may need to be explicitly reset.
 * </p>
 * This code is autogenerated. Modifications may be overwritten!
 */
public class ZclAlarmsCluster extends ZclCluster {
    // Cluster ID
    private static final int CLUSTER_ID = 0x0009;

    // Attribute constants
    private final int ATTR_ALARMCOUNT = 0x0000;

    // Attribute initialisation
    protected Map<Integer, ZclAttribute> initializeAttributes() {
        Map<Integer, ZclAttribute> attributeMap = new HashMap<Integer, ZclAttribute>(1);

        attributeMap.put(ATTR_ALARMCOUNT, new ZclAttribute(0, ZclDataType.UNSIGNED_16_BIT_INTEGER, 
                false, true, false, false));

        return attributeMap;
    }

    /**
     * Default constructor.
     */
    public ZclAlarmsCluster(final ZigBeeApi zigbeeApi, final ZigBeeDevice zigbeeDevice) {
        super(zigbeeApi, zigbeeDevice, CLUSTER_ID);
    }



    /**
     * Get the <i>AlarmCount</i> attribute
     * <p>
     * The AlarmCount attribute is 16-bits in length and specifies the number of entries
     * currently in the alarm table. This attribute shall be specified in the range 0x00 to
     * the maximum defined in the profile using this cluster.
     * <br>
     * If alarm logging is not implemented this attribute shall always take the value
     * 0x00.
     * </p>
     * The attribute is of type {@link Integer}<br>
     * The implementation of this attribute by a device is OPTIONAL
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getAlarmCount() {
        return read(ATTR_ALARMCOUNT);
    }


    /**
     * The Reset Alarm Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> resetAlarmCommand() {
        return send(new ResetAlarmCommand());
    }


    /**
     * The Reset All Alarms Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> resetAllAlarmsCommand() {
        return send(new ResetAllAlarmsCommand());
    }


    /**
     * The Get Alarm Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getAlarmCommand() {
        return send(new GetAlarmCommand());
    }


    /**
     * The Reset Alarm Log Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> resetAlarmLogCommand() {
        return send(new ResetAlarmLogCommand());
    }


    /**
     * The Alarm Command
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> alarmCommand() {
        return send(new AlarmCommand());
    }


    /**
     * The  Get Alarm Response
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> getAlarmResponse() {
        return send(new GetAlarmResponse());
    }


    /**
     * Add a binding for this cluster to the local node
     *
     * @return the {@link Future<CommandResult>} command result future
     */
    public Future<CommandResult> bind() {
        return bind();
    }

}
